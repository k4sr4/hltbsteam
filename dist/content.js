(()=>{"use strict";class e extends Error{constructor(e,t,o=!0,r){super(e),this.code=t,this.recoverable=o,this.userMessage=r,this.name="HLTBError",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}class t extends e{constructor(e,t){super(e,"DATABASE_LOAD_ERROR",!1,"Failed to load HLTB database. Extension may not work properly."),this.originalError=t,this.name="DatabaseLoadError"}}class o extends e{constructor(e,t){super(e,"PAGE_DETECTION_ERROR",!0,"Unable to detect game information on this Steam page."),this.detectionAttempts=t,this.name="SteamPageDetectionError"}}class r extends e{constructor(e,t){super(e,"DOM_INJECTION_ERROR",!0,"Unable to display HLTB data on this page."),this.attemptedSelectors=t,this.name="DOMInjectionError"}}class n extends e{constructor(e,t){super(e,"VALIDATION_ERROR",!1,"Invalid data detected."),this.field=t,this.name="ValidationError"}}function a(t){return t instanceof e}function i(e){return a(e)&&e.userMessage?e.userMessage:e instanceof Error?e.message:"An unexpected error occurred"}function s(e){return a(e)?e.code:e instanceof Error?e.name:"UNKNOWN_ERROR"}class c{static getInstance(e){return c.instance||(c.instance=new c(e)),c.instance}constructor(e){this.errorLog=[],this.config={maxLogSize:e?.maxLogSize??100,enableConsoleLogging:e?.enableConsoleLogging??!0,enableStoragePersistence:e?.enableStoragePersistence??!0,enableErrorReporting:e?.enableErrorReporting??!1},this.MAX_LOG_SIZE=this.config.maxLogSize,this.setupGlobalHandlers()}setupGlobalHandlers(){"undefined"!=typeof window&&(window.addEventListener("error",e=>{this.handleError(new Error(e.message),{type:"uncaught",filename:e.filename,lineno:e.lineno,colno:e.colno})}),window.addEventListener("unhandledrejection",e=>{const t=e.reason instanceof Error?e.reason:new Error(String(e.reason));this.handleError(t,{type:"unhandled_promise",promise:!0})})),"undefined"!=typeof chrome&&chrome?.runtime&&chrome.runtime.onError?.addListener(e=>{this.handleError(new Error(String(e)),{type:"chrome_runtime"})})}handleError(e,t={}){this.config.enableConsoleLogging&&console.error("[HLTB Error]",e,t),this.logError(e,t),a(e)?this.handleHLTBError(e):"NetworkError"===e.name?this.handleNetworkError(e):this.handleUnknownError(e),this.isCritical(e)&&this.config.enableErrorReporting&&this.reportError(e,t)}handleHLTBError(e){e.recoverable&&this.attemptRecovery(e)}handleNetworkError(e){console.error("[HLTB] Network error - data may be unavailable")}handleUnknownError(e){console.error("[HLTB] Unknown error:",e)}attemptRecovery(e){switch(e.code){case"GAME_NOT_FOUND":const t=e;this.logMissingGame(t.gameTitle);break;case"PAGE_DETECTION_ERROR":console.log("[HLTB] Page detection failed - trying fallback strategies");break;case"DOM_INJECTION_ERROR":console.log("[HLTB] DOM injection failed - checking alternative injection points");break;case"STORAGE_ERROR":const o=e;"get"!==o.operation&&"set"!==o.operation||this.clearCorruptedCache();break;case"LOW_CONFIDENCE":const r=e;console.warn(`[HLTB] Low confidence match: ${r.gameTitle} (${r.confidence}%)`);break;case"DATABASE_LOAD_ERROR":console.error("[HLTB] Critical database error - extension cannot function")}}logMissingGame(e){"undefined"!=typeof chrome&&chrome.storage&&chrome.storage.local.get("missing_games",t=>{const o=t.missing_games||[];if(!o.includes(e)){o.push(e);const t=o.slice(-100);chrome.storage.local.set({missing_games:t},()=>{console.log(`[HLTB] Logged missing game: ${e}`)})}})}clearCorruptedCache(){"undefined"!=typeof chrome&&chrome.storage&&chrome.storage.local.remove(["match_cache"],()=>{console.log("[HLTB] Corrupted cache cleared")})}logError(e,t){const o={timestamp:Date.now(),message:e.message,stack:void 0,context:this.sanitizeContext(t),name:e.name,code:s(e),recoverable:!!a(e)&&e.recoverable,userMessage:i(e)};this.errorLog.push(o),this.errorLog.length>this.MAX_LOG_SIZE&&this.errorLog.shift(),this.persistErrorLog()}sanitizeContext(e){if(!e||"object"!=typeof e)return{};const t={},o=["type","action","code","recoverable"];for(const r of o)r in e&&(t[r]=String(e[r]).substring(0,100));return t}persistErrorLog(){if(this.config.enableStoragePersistence&&"undefined"!=typeof chrome&&chrome.storage)try{chrome.storage.local.set({errorLog:this.errorLog.slice(-50)}).catch(e=>{console.warn("[HLTB] Failed to persist error log:",e)})}catch(e){}}isCritical(e){return e instanceof t||e instanceof n||e.message.includes("undefined")||e.message.includes("Cannot read")||e.message.includes("is not a function")||!0===e.stack?.includes("service-worker")}reportError(e,t){console.log("[HLTB] Would report critical error to monitoring service:",{error:e.message,code:s(e),context:t})}showUserNotification(e,t="error"){"undefined"!=typeof chrome&&chrome.tabs&&chrome.tabs.query({active:!0,currentWindow:!0},o=>{o[0]?.id&&chrome.tabs.sendMessage(o[0].id,{action:"showNotification",message:e,type:t}).catch(()=>{})})}getErrorLog(){return[...this.errorLog]}clearErrorLog(){this.errorLog=[],this.config.enableStoragePersistence&&"undefined"!=typeof chrome&&chrome.storage&&chrome.storage.local.remove(["errorLog"])}getErrorStats(){const e={total:this.errorLog.length,critical:0,recoverable:0,byType:{}};for(const t of this.errorLog)t.recoverable?e.recoverable++:e.critical++,e.byType[t.code]=(e.byType[t.code]||0)+1;return e}}async function l(e,t,o="Operation timed out"){return Promise.race([e(),new Promise((e,r)=>setTimeout(()=>r(new Error(o)),t))])}const d=new class{constructor(){this.mutationObserver=null,this.containerElement=null,this.metrics=null,this.lastUrl=window.location.href,this.errorHandler=c.getInstance({enableConsoleLogging:!0,enableStoragePersistence:!0}),this.setupMessageListener(),this.log("Content script loaded on:",this.lastUrl)}async initialize(){await async function(e,t,o){try{return await e()}catch(e){return void(o||(e=>c.getInstance().handleError(e)))(e)}}(async()=>this.initializeInternal(),0,e=>{this.errorHandler.handleError(e),this.injectError(e.message)})}async initializeInternal(){const e=performance.now();if(!this.isGamePage())return void this.log("Not a game page, skipping initialization");const t=await l(async()=>this.sendMessage({action:"getSettings"}),5e3,"Settings check timed out");if(!t.success||!t.settings?.enabled)return void this.log("Extension is disabled");await this.waitForPageStability();const r=this.extractGameInfo();if(!r)throw new o("Could not extract game info from Steam page",4);this.log("Game detected:",r);const n=await l(async()=>this.sendMessage({action:"fetchHLTB",gameTitle:r.title,appId:r.appId}),1e4,"HLTB data fetch timed out");if(n.success&&n.data){this.log("Data received:",n.data);const t=performance.now();this.injectHLTBData(n.data);const o=performance.now();this.metrics={startTime:e,injectionTime:t-e,totalTime:o-e},this.log("Performance metrics:",this.metrics)}else{const e=n.error||"Failed to load completion times";this.errorHandler.handleError(new Error(e)),this.injectError(e)}}async waitForPageStability(){this.log("Waiting for page stability...");let e=0;for(;e<20;){const t=document.querySelector(".game_area_purchase"),o=document.querySelector(".game_details"),r=document.querySelector(".page_content");if(t||o||r)return await this.sleep(500),void this.log("Page appears stable, ready to inject");await this.sleep(250),e++}this.log("Timed out waiting for page stability, injecting anyway")}sleep(e){return new Promise(t=>setTimeout(t,e))}isGamePage(){const e=window.location.href;return e.includes("store.steampowered.com/app/")||e.includes("steamcommunity.com/app/")}extractGameInfo(){const e=window.location.href,t=e.match(/\/app\/(\d+)/);if(!t)return null;const o=t[1];let r="";const n=e.match(/\/app\/\d+\/([^\/\?#]+)/);if(n&&(r=this.cleanUrlTitle(n[1])),!r){const e=document.querySelector("#appHubAppName");e?.textContent&&(r=e.textContent.trim())}if(!r){const e=document.querySelector('meta[property="og:title"]');e?.content&&(r=this.cleanMetaTitle(e.content))}return r||(r=this.cleanMetaTitle(document.title)),r?{appId:o,title:r}:null}cleanUrlTitle(e){return e.replace(/_/g," ").replace(/%20/g," ").trim()}cleanMetaTitle(e){return e.replace(/ on Steam$/,"").replace(/^Save \d+% on /,"").trim()}injectHLTBData(e){this.cleanup();const t=e=>null==e||0===e?"--":e+(1===e?" Hour":" Hours"),o=document.createElement("div");o.className="hltb-container",this.containerElement=o,e.source&&o.setAttribute("data-source",e.source),e.confidence&&o.setAttribute("data-confidence",e.confidence);const r=document.createElement("div");r.className="hltb-header";const n=document.createElement("span");n.className="hltb-logo",n.textContent="HLTB";const a=document.createElement("span");if(a.className="hltb-title",a.textContent="HowLongToBeat",e.source&&"api"!==e.source){const t=document.createElement("span");t.className="hltb-source";const o="cache"===e.source?"cached":"scraper"===e.source?"scraped":"fallback"===e.source?"estimated":"database"===e.source?"database":"";o&&(t.textContent=`(${o})`,a.appendChild(document.createTextNode(" ")),a.appendChild(t))}r.appendChild(n),r.appendChild(a);const i=document.createElement("div");i.className="hltb-times";const s=[{label:"Main Story",value:t(e.mainStory)},{label:"Main + Extra",value:t(e.mainExtra)},{label:"Completionist",value:t(e.completionist)}];if(null===e.mainStory&&null===e.mainExtra&&null===e.completionist){const e=document.createElement("div");e.className="hltb-multiplayer-notice",e.textContent="Multiplayer Game - No completion times",i.appendChild(e)}else s.forEach(({label:e,value:t})=>{const o=document.createElement("div");o.className="hltb-time-box","--"===t&&o.classList.add("hltb-no-data");const r=document.createElement("div");r.className="hltb-label",r.textContent=e;const n=document.createElement("div");n.className="hltb-hours",n.textContent=t,o.appendChild(r),o.appendChild(n),i.appendChild(o)});o.appendChild(r),o.appendChild(i),this.injectIntoPage(o)}injectError(e){this.cleanup();const t=document.createElement("div");t.className="hltb-container hltb-error-container",this.containerElement=t;const o=document.createElement("div");o.className="hltb-header";const r=document.createElement("span");r.className="hltb-title",r.textContent="HowLongToBeat",o.appendChild(r);const n=document.createElement("div");n.className="hltb-error",n.textContent=e,t.appendChild(o),t.appendChild(n),this.injectIntoPage(t)}injectIntoPage(e){const t=[".game_area_purchase",".game_area_purchase_game",".apphub_AppName",".apphub_HomeHeader",".rightcol",".game_meta_data","#appHubAppName"];let o=!1;for(const r of t){const t=document.querySelector(r);if(t){r.includes("apphub")||r.includes("appHub")?t.parentNode?.insertBefore(e,t.nextSibling):t.parentNode?.insertBefore(e,t),this.log("UI injected successfully at:",r),o=!0;break}}if(!o){const e=new r("Could not find suitable injection point on page",t);throw this.errorHandler.handleError(e),e}}setupMessageListener(){chrome.runtime.onMessage.addListener((e,t,o)=>("showNotification"===e.action&&(this.showNotification(e.message,e.type),o({success:!0})),!0))}showNotification(e,t="info"){const o=document.createElement("div");o.className=`hltb-notification hltb-notification-${t}`,o.textContent=e,document.body.appendChild(o),setTimeout(()=>o.classList.add("hltb-notification-visible"),10),setTimeout(()=>{o.classList.remove("hltb-notification-visible"),setTimeout(()=>o.remove(),300)},5e3)}async sendMessage(e){try{return await chrome.runtime.sendMessage(e)||{success:!1,error:"No response from background service"}}catch(e){return console.error("[HLTB] Message error:",e),{success:!1,error:e instanceof Error?e.message:"Failed to communicate with extension"}}}setupNavigationObserver(){this.mutationObserver=new MutationObserver(()=>{const e=window.location.href;e!==this.lastUrl&&(this.lastUrl=e,this.log("Navigation detected:",e),this.cleanup(),this.isGamePage()&&(this.log("Re-initializing on new game page"),this.initialize()))}),this.mutationObserver.observe(document.body,{childList:!0,subtree:!0}),this.log("Navigation observer set up")}cleanup(){this.containerElement&&this.containerElement.parentNode&&(this.containerElement.parentNode.removeChild(this.containerElement),this.containerElement=null)}destroy(){this.cleanup(),this.mutationObserver&&(this.mutationObserver.disconnect(),this.mutationObserver=null),this.log("Content script destroyed")}log(e,t){void 0!==t?console.log(`[HLTB] ${e}`,t):console.log(`[HLTB] ${e}`)}};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{d.initialize(),d.setupNavigationObserver()}):(d.initialize(),d.setupNavigationObserver()),window.addEventListener("unload",()=>{d.destroy()})})();